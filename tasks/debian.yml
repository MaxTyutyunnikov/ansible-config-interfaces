---

- name: debian | Installing OVS Packages
  apt:
    name: "{{ openvswitch_debian_packages }}"
    state: "present"
  become: true

- name: service | Ensuring OVS Service Is Started And Enabled On Boot
  service:
    name: "openvswitch-switch"
    state: "started"
    enabled: true
  become: true

- name: system_tuning | Managing sysctl
  sysctl:
    name: "{{ item['name'] }}"
    value: "{{ item['value'] }}"
    state: "present"
  become: true
  with_items: '{{ openvswitch_system_tuning }}'
  when: openvswitch_system_tuning is defined

- name: debian | Installing Pre-Req Packages
  apt:
    name: ["lldpd"]
    state: present
  become: true
  register: result
  until: result is successful
  when: config_install_lldp | bool

- name: debian | Installing bridge-utils
  apt:
    name: ["bridge-utils"]
    state: present
  become: true
  register: result
  until: result is successful
  when: config_network_bridges

- name: debian | Installing Bonding Packages
  apt:
    name: ["ifenslave"]
    state: present
  become: true
  register: result
  until: result is successful
  when: config_network_bonds

- name: debian | Installing VLAN Packages
  apt:
    name: ["vlan"]
    state: present
  become: true
  register: result
  until: result is successful
  when: config_network_vlans

- name: debian | Configuring Defined Interfaces
  template:
    src: "{{ config_interface_template }}"
    dest: /etc/network/interfaces
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  register: config_interface
  become: true
  when: >
    (config_network_interfaces is defined and
    config_network_interfaces)

- name: debian | Restarting Network Interfaces
  shell: bash -c "ifdown {{ item.name }} --force && ifup {{ item.name }} --force"
  become: true
  with_items: "{{ network_interfaces }}"
  when: >
    (enable_configured_interfaces_after_defining or item['enable']) and
    item['configure'] and
    config_interface['changed']

- name: debian | Restarting Network VLANs
  shell: bash -c "ifdown {{ item.name }} --force && ifup {{ item.name }} --force"
  become: true
  with_items: "{{ network_vlans }}"
  when: >
    config_network_vlans and
    (enable_configured_interfaces_after_defining or item['enable']) and
    item['configure'] and
    config_interface['changed']

- name: debian | Restarting Network Bridges
  shell: bash -c "ifdown {{ item.name }} --force && ifup {{ item.name }} --force"
  become: true
  with_items: "{{ network_bridges }}"
  when: >
    config_network_bridges and
    (enable_configured_interfaces_after_defining or item['enable']) and
    item['configure'] and
    config_interface['changed']

- name: debian | Restarting OVS Bridges
  shell: bash -c "ifdown {{ item.name }} --force && ifup {{ item.name }} --force"
  become: true
  with_items: "{{ ovs_bridges }}"
  when: >
    config_ovs_bridges and
    (enable_configured_interfaces_after_defining or item['enable']) and
    item['configure'] and
    config_interface['changed']

- name: debian | Restarting OVS Bonds
  shell: bash -c "ifdown {{ item.name }} --force && ifup {{ item.name }} --force"
  become: true
  with_items: "{{ ovs_bonds }}"
  when: >
    config_ovs_bonds and
    (enable_configured_interfaces_after_defining or item['enable']) and
    item['configure'] and
    config_interface['changed']

- name: debian | Restarting OVS Interfaces
  shell: bash -c "ifdown {{ item.name }} --force && ifup {{ item.name }} --force"
  become: true
  with_items: "{{ ovs_interfaces }}"
  when: >
    config_ovs_interfaces and
    (enable_configured_interfaces_after_defining or item['enable']) and
    item['configure'] and
    config_interface['changed']

- name: Add thin provisoning hook
  template:
    src: "dhcp_ovs.network.j2"
    dest: "/etc/systemd/network/dhcp_ovs.network"
    owner: root
    group: root
    mode: 0755

- name: bridges | Managing OVS Bridges
  openvswitch_bridge:
    bridge: "{{ item['bridge'] }}"
    parent: "{{ item['parent']|default(omit) }}"
    fail_mode: "{{ item['fail_mode']|default('standalone') }}"
    state: "{{ item['state'] }}"
    timeout: "{{ item['timeout']|default(omit) }}"
    vlan: "{{ item['vlan']|default(omit) }}"
  become: true
  with_items: '{{ dyn_openvswitch_bridges }}'
  when: dyn_openvswitch_bridges is defined

- name: ports | Managing OVS Ports
  openvswitch_port:
    bridge: "{{ item[0]['bridge'] }}"
    port: "{{ item[1]['port'] }}"
    state: "{{ item[1]['state'] }}"
    tag: "{{ item[1]['tag']|default(omit) }}"
    timeout: "{{ item[0]['timeout']|default(omit) }}"
  become: true
  with_subelements:
    - '{{ dyn_openvswitch_ports }}'
    - ports
  when: dyn_openvswitch_ports is defined
